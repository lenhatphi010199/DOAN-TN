'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _AbilityContext = require('./AbilityContext');

var _AbilityContext2 = _interopRequireDefault(_AbilityContext);

var _ableTo = require('./ableTo');

var _ableTo2 = _interopRequireDefault(_ableTo);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AbilityControl = function (_Component) {
  _inherits(AbilityControl, _Component);

  function AbilityControl() {
    _classCallCheck(this, AbilityControl);

    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  AbilityControl.prototype.renderChildren = function renderChildren(abilities) {
    if ((0, _ableTo2.default)(this.props.permission, abilities)) {
      return _react.Children.only(this.props.children);
    } else {
      return null;
    }
  };

  AbilityControl.prototype.render = function render() {
    var _this2 = this;

    return _react2.default.createElement(
      _AbilityContext2.default.Consumer,
      null,
      function (abilitiesContext) {
        return _this2.renderChildren(abilitiesContext);
      }
    );
  };

  return AbilityControl;
}(_react.Component);

exports.default = AbilityControl;